// Auto Generated by Qing Code Generator
// Do not modify this file manually
// Generated at: 2025-08-22T03:43:26.952556900

package cn.chenyunlong.codegen.example.domain.dto.updater;

import cn.chenyunlong.codegen.example.domain.Order;
import cn.chenyunlong.qing.domain.common.AggregateId;
import io.swagger.v3.oas.annotations.media.Schema;
import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Optional;
import lombok.Data;

/**
 * Order更新数据传输对象
 *
 * @author 代码生成器
 * @since 2025-08-22 03:45:29
 */
@Schema(
        name = "OrderUpdater",
        description = "Order更新数据传输对象"
)
@Data
public class OrderUpdater {
    @Schema(
            description = "orderNumber"
    )
    private String orderNumber;

    @Schema(
            description = "customerId"
    )
    private Long customerId;

    @Schema(
            description = "customerName"
    )
    private String customerName;

    @Schema(
            description = "status"
    )
    private Order.OrderStatus status;

    @Schema(
            description = "totalAmount"
    )
    private BigDecimal totalAmount;

    @Schema(
            description = "discountAmount"
    )
    private BigDecimal discountAmount;

    @Schema(
            description = "paidAmount"
    )
    private BigDecimal paidAmount;

    @Schema(
            description = "shippingAddress"
    )
    private String shippingAddress;

    @Schema(
            description = "shippingPhone"
    )
    private String shippingPhone;

    @Schema(
            description = "remark"
    )
    private String remark;

    @Schema(
            description = "orderTime"
    )
    private LocalDateTime orderTime;

    @Schema(
            description = "confirmTime"
    )
    private LocalDateTime confirmTime;

    @Schema(
            description = "shipTime"
    )
    private LocalDateTime shipTime;

    @Schema(
            description = "deliveryTime"
    )
    private LocalDateTime deliveryTime;

    @Schema(
            description = "orderType"
    )
    private Order.OrderType orderType;

    @Schema(
            description = "paymentMethod"
    )
    private Order.PaymentMethod paymentMethod;

    @Schema(
            description = "needInvoice"
    )
    private Boolean needInvoice;

    @Schema(
            description = "invoiceTitle"
    )
    private String invoiceTitle;

    @Schema(
            description = "taxNumber"
    )
    private String taxNumber;

    @Schema(
            description = "source"
    )
    private Order.OrderSource source;

    private AggregateId id;

    public void updateOrder(Order param) {
        Optional.ofNullable(getOrderNumber()).ifPresent(param::setOrderNumber);
        Optional.ofNullable(getCustomerId()).ifPresent(param::setCustomerId);
        Optional.ofNullable(getCustomerName()).ifPresent(param::setCustomerName);
        Optional.ofNullable(getStatus()).ifPresent(param::setStatus);
        Optional.ofNullable(getTotalAmount()).ifPresent(param::setTotalAmount);
        Optional.ofNullable(getDiscountAmount()).ifPresent(param::setDiscountAmount);
        Optional.ofNullable(getPaidAmount()).ifPresent(param::setPaidAmount);
        Optional.ofNullable(getShippingAddress()).ifPresent(param::setShippingAddress);
        Optional.ofNullable(getShippingPhone()).ifPresent(param::setShippingPhone);
        Optional.ofNullable(getRemark()).ifPresent(param::setRemark);
        Optional.ofNullable(getOrderTime()).ifPresent(param::setOrderTime);
        Optional.ofNullable(getConfirmTime()).ifPresent(param::setConfirmTime);
        Optional.ofNullable(getShipTime()).ifPresent(param::setShipTime);
        Optional.ofNullable(getDeliveryTime()).ifPresent(param::setDeliveryTime);
        Optional.ofNullable(getOrderType()).ifPresent(param::setOrderType);
        Optional.ofNullable(getPaymentMethod()).ifPresent(param::setPaymentMethod);
        Optional.ofNullable(getNeedInvoice()).ifPresent(param::setNeedInvoice);
        Optional.ofNullable(getInvoiceTitle()).ifPresent(param::setInvoiceTitle);
        Optional.ofNullable(getTaxNumber()).ifPresent(param::setTaxNumber);
        Optional.ofNullable(getSource()).ifPresent(param::setSource);
    }

    public AggregateId getId() {
        return id;
    }

    public void setId(AggregateId id) {
        this.id = id;
    }
}
