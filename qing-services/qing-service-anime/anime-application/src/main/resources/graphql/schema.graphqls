type Query {
    totalInPark: Int
    parkingHistory(plate: String): [ParkingHistory]
    dailyRevenue: [DailyRevenue]
    shouldPay(req: ShouldPayReq): Int
    greeting: String!
    bookById(id:String): Book
    books(id:String):[Book]
}

type Subscription {
    greetings: String!
}

#String id, String name, int pageCount, String authorId
type Book {
    id: String
    name: String
    pageCount: Int
    authorId: String
}

type Mutation {
    checkIn(req: CheckInReq): Boolean
    checkOut(req: CheckOutReq): Boolean
    notifyPay(req: PayReq): Boolean
}

input CheckInReq {
    plate: String
    time: String
}

input CheckOutReq {
    plate: String
    time: String
}

input PayReq {
    plate: String
    amount: Int
    time: String
}

input ShouldPayReq {
    plate: String
    time: String
}

type ParkingHistory {
    plate: String
    checkInTime: String
    checkOutTime: String
    payAmount: Int
}

type DailyRevenue {
    date: String
    revenue: Int
}
