// Auto Generated by Qing Code Generator
// Do not modify this file manually
// Generated at: 2025-08-22T12:29:32.602863300

package cn.chenyunlong.codegen.example.domain.controller;

import cn.chenyunlong.codegen.example.domain.dto.creator.OrderCreator;
import cn.chenyunlong.codegen.example.domain.dto.query.OrderQuery;
import cn.chenyunlong.codegen.example.domain.dto.request.OrderCreateRequest;
import cn.chenyunlong.codegen.example.domain.dto.request.OrderQueryRequest;
import cn.chenyunlong.codegen.example.domain.dto.request.OrderUpdateRequest;
import cn.chenyunlong.codegen.example.domain.dto.response.OrderResponse;
import cn.chenyunlong.codegen.example.domain.dto.updater.OrderUpdater;
import cn.chenyunlong.codegen.example.domain.dto.vo.OrderVO;
import cn.chenyunlong.codegen.example.domain.mapper.OrderMapper;
import cn.chenyunlong.codegen.example.domain.service.IOrderService;
import cn.chenyunlong.common.constants.CodeEnum;
import cn.chenyunlong.common.model.JsonResult;
import cn.chenyunlong.common.model.PageRequestWrapper;
import cn.chenyunlong.common.model.PageResult;
import java.util.stream.Collectors;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@Slf4j
@RequestMapping("api/v1/order")
@RequiredArgsConstructor
public class OrderController {
    private final IOrderService orderService;

    /**
     * createOrder request
     */
    @PostMapping("create")
    public JsonResult<Long> createOrder(@RequestBody OrderCreateRequest request) {
        OrderCreator creator = OrderMapper.INSTANCE.request2Dto(request);
        return JsonResult.success(orderService.createOrder(creator));
    }

    /**
     * update request
     */
    @PostMapping("updateOrder")
    public JsonResult<String> updateOrder(@RequestBody OrderUpdateRequest request) {
        OrderUpdater updater = OrderMapper.INSTANCE.request2Updater(request);
        orderService.updateOrder(updater);
        return JsonResult.success(CodeEnum.Success.getName());
    }

    /**
     * valid
     */
    @PostMapping("valid/{id}")
    public JsonResult<String> validOrder(@PathVariable Long id) {
        orderService.validOrder(id);
        return JsonResult.success(CodeEnum.Success.getName());
    }

    /**
     * invalid
     */
    @PostMapping("invalid/{id}")
    public JsonResult<String> invalidOrder(@PathVariable Long id) {
        orderService.invalidOrder(id);
        return JsonResult.success(CodeEnum.Success.getName());
    }

    /**
     * findById
     */
    @GetMapping("findById/{id}")
    public JsonResult<OrderResponse> findById(@PathVariable Long id) {
        OrderVO vo = orderService.findById(id);
        OrderResponse response = OrderMapper.INSTANCE.vo2CustomResponse(vo);
        return JsonResult.success(response);
    }

    /**
     * findByPage request
     */
    @PostMapping("page")
    public JsonResult<PageResult<OrderResponse>> page(
            @RequestBody PageRequestWrapper<OrderQueryRequest> request) {
        PageRequestWrapper<OrderQuery> wrapper = new PageRequestWrapper<>();
        wrapper.setBean(OrderMapper.INSTANCE.request2Query(request.getBean()));
        wrapper.setSorts(request.getSorts());
        wrapper.setPageSize(request.getPageSize());
        wrapper.setPage(request.getPage());
        Page<OrderVO> page = orderService.findByPage(wrapper);
        return JsonResult.success(
                PageResult.of(
                    page.getContent().stream()
                        .map(OrderMapper.INSTANCE::vo2CustomResponse)
                        .collect(Collectors.toList()),
                    page.getTotalElements(),
                    page.getSize(),
                    page.getNumber())
            );
    }
}
