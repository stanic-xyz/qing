// Auto Generated by Qing Code Generator
// Do not modify this file manually
// Generated at: 2025-08-22T12:29:32.548752200
package cn.chenyunlong.codegen.example.domain.service.impl;

import cn.chenyunlong.codegen.example.domain.Order;
import cn.chenyunlong.codegen.example.domain.dto.creator.OrderCreator;
import cn.chenyunlong.codegen.example.domain.dto.query.OrderQuery;
import cn.chenyunlong.codegen.example.domain.dto.updater.OrderUpdater;
import cn.chenyunlong.codegen.example.domain.dto.vo.OrderVO;
import cn.chenyunlong.codegen.example.domain.mapper.OrderMapper;
import cn.chenyunlong.codegen.example.domain.repository.OrderRepository;
import cn.chenyunlong.codegen.example.domain.service.IOrderService;
import cn.chenyunlong.common.constants.CodeEnum;
import cn.chenyunlong.common.exception.BusinessException;
import cn.chenyunlong.common.model.PageRequestWrapper;
import cn.chenyunlong.qing.domain.base.EntityOperations;
import java.util.Optional;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Transactional
@Service
@Slf4j
@RequiredArgsConstructor
public class OrderServiceImpl implements IOrderService {
    private final OrderRepository orderRepository;

    /**
     * createImpl
     */
    @Override
    public Long createOrder(OrderCreator creator) {
        Optional<Order> order = EntityOperations.doCreate(orderRepository)
        .create(() -> OrderMapper.INSTANCE.dtoToEntity(creator))
        .update(Order::init)
        .execute();
        return order.isPresent() ? order.get().getId() : 0;
    }

    /**
     * update
     */
    @Override
    public void updateOrder(OrderUpdater updater) {
        EntityOperations.doUpdate(orderRepository)
        .loadById(updater.getId())
        .update(updater::updateOrder)
        .execute();
    }

    /**
     * valid
     */
    @Override
    public void validOrder(Long id) {
        EntityOperations.doUpdate(orderRepository)
        .loadById(id)
        .update(Order::valid)
        .execute();
    }

    /**
     * invalid
     */
    @Override
    public void invalidOrder(Long id) {
        EntityOperations.doUpdate(orderRepository)
        .loadById(id)
        .update(Order::invalid)
        .execute();
    }

    /**
     * findById
     */
    @Override
    public OrderVO findById(Long id) {
        Optional<Order> order =  orderRepository.findById(id);
        return new OrderVO(order.orElseThrow(() -> new BusinessException(CodeEnum.NotFoundError)));
    }

    /**
     * findByPage
     */
    @Override
    public Page<OrderVO> findByPage(PageRequestWrapper<OrderQuery> query) {
        PageRequest pageRequest = PageRequest.of(query.getPage(), query.getPageSize(), Sort.Direction.DESC, "createdAt");
        return orderRepository.findAll(pageRequest).map(OrderVO::new);
    }
}
